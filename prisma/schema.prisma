generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String
  email      String
  address    String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  Tickect    Tickect[]
  userId     String?   @db.ObjectId
  user       User?     @relation(fields: [userId], references: [id])
}

model Tickect {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  status      String
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())
  customerId  String?   @db.ObjectId
  customer    Customer? @relation(fields: [customerId], references: [id])
  userId      String?   @db.ObjectId
  user        User?     @relation(fields: [userId], references: [id])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Tickect       Tickect[]
  Customer      Customer[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
